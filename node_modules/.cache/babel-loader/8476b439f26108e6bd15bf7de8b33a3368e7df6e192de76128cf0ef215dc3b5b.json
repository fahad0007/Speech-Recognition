{"ast":null,"code":"var _jsxFileName = \"E:\\\\Voice Recognition\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport useClipboard from \"react-use-clipboard\";\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition';\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const startListening = () => SpeechRecognition.startListening({\n    continuous: true,\n    language: \"en-IN\",\n    language: \"en\"\n  });\n  const stopListening = () => SpeechRecognition.stopListening();\n  const {\n    transcript,\n    browserSupportsSpeechRecognition\n  } = useSpeechRecognition();\n  const resetText = () => {};\n  const [isCopied, setCopied] = useClipboard(transcript);\n  // const Dictaphone = () => {\n  //   const {\n  //     transcript,\n  //     listening,\n  //     resetTranscript,\n  //     browserSupportsSpeechRecognition\n  //   } = useSpeechRecognition();\n\n  if (!browserSupportsSpeechRecognition) {\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      children: \"Browser doesn't support speech recognition.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 14\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Speach To Text Converter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"A React Hook that converts speach from the microphone to text and makes it available to your Components\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-content\",\n        children: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"btn-style\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: setCopied,\n          children: [\"Copy \", isCopied ? \"Yes! üëç\" : \"Nope! üëé\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: startListening,\n          children: \"Start Listening\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: stopListening,\n          children: \"Stop Listening\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: resetText,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"kI96COSEdvj1GGEHTM6zscFadbo=\", false, function () {\n  return [useSpeechRecognition, useClipboard];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useClipboard","SpeechRecognition","useSpeechRecognition","jsxDEV","_jsxDEV","App","_s","startListening","continuous","language","stopListening","transcript","browserSupportsSpeechRecognition","resetText","isCopied","setCopied","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","_c","$RefreshReg$"],"sources":["E:/Voice Recognition/src/App.js"],"sourcesContent":["import React from 'react'\nimport useClipboard from \"react-use-clipboard\";\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\nimport \"./App.css\"\n\nconst App = () => {\n  const startListening = ()=> SpeechRecognition.startListening({ continuous: true, language:\"en-IN\" , language:\"en\" });\n  const stopListening = ()=> SpeechRecognition.stopListening();\n  const { transcript, browserSupportsSpeechRecognition } = useSpeechRecognition()\n const resetText = ()=>{\n  \n }\n  const [isCopied, setCopied] = useClipboard(transcript);\n  // const Dictaphone = () => {\n  //   const {\n  //     transcript,\n  //     listening,\n  //     resetTranscript,\n  //     browserSupportsSpeechRecognition\n  //   } = useSpeechRecognition();\n  \n    if (!browserSupportsSpeechRecognition) {\n      return <span>Browser doesn't support speech recognition.</span>;\n    }\n  return (\n    <div className='app'>\n      <div className=\"container\">\n        <h2>Speach To Text Converter</h2>\n        {/* <br /> */}\n        <p>A React Hook that converts speach from the microphone to text and makes it available to your Components</p>\n\n        <div className=\"main-content\">\n{transcript}\n        </div>\n        <div className=\"btn-style\">\n        <button onClick={setCopied}>\n     Copy {isCopied ? \"Yes! üëç\" : \"Nope! üëé\"}\n    </button>\n          <button onClick={startListening}>Start Listening</button>\n          <button onClick={stopListening} >Stop Listening</button>\n          <button onClick={resetText}  >Reset</button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}